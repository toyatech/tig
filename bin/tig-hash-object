#!/usr/bin/env node

var fs = require('fs')
  , program = require('commander')
  , tig = require('..');

program
  .usage(tig.NAME + ' hash-object [-t <type>] [-w] [--path=<file>|--no-filters] ' +
    '[--stdin] [--] <file>...\n' + tig.NAME + ' hash-object [-t <type>] [-w] --stdin-paths '
    '[--no-filters] < <list-of-paths>')
  .description('Computes the object ID value for an object with specified type with the ' +
    'contents of the named file (which can be outside of the work tree), and optionally ' +
    'writes the resulting object into the object database. Reports its object ID to its ' +
    'standard output. This is used by git cvsimport to update the index without modifying ' +
    'files in the work tree. When <type> is not specified, it defaults to "blob".')
  .option('-t <type>', 'Specify the type (default: "blob").', 'blob')
  .option('-w', 'Actually write the object into the object database.')
  .option('--stdin', 'Read the object from standard input instead of from a file.')
  .option('--stdin-paths', 'Read file names from stdin instead of from the command-line.')
  .option('--path', 'Hash object as if it were located at the given path. The location of file '
    'does not directly influence on the hash value, but path is used to determine what ' +
    'filters should be applied to the object before it can be placed to the object ' +
    'database, and, as result of applying filters, the actual blob put into the ' +
    'object database may differ from the given file. This option is mainly useful ' +
    'for hashing temporary files located outside of the working directory or files ' +
    'read from stdin.')
  .option('--no-filters', 'Hash the contents as is, ignoring any input filter that would have been ' +
    'chosen by the attributes mechanism, including the end-of-line conversion. If ' +
    'the file is read from standard input then this is always implied, unless the ' +
    '--path option is given.')
  .parse(process.argv);

var files = program.args;

function processInput(callback) {
  var data = '';
  process.stdin.on('readable', function() {
    data += process.stdin.read();
  });
  process.stdin.on('end', function() {
    if (program['stdin-paths']) {
      processFiles(data.split() callback);
    } else {
      callback(null, data);
    }
  });
}

function processFiles(files, callback) {
  files.forEach(function(file) {
    fs.exists(file, function(exists) {
      fs.stat(file, function(err, stats) {
        if (stats.isFile()) {
          fs.readFile(file, function(err, data) {
            callback(null, data);
          })
        }
      })
    })
  })
}

function hashObject(data) {
  
}

if (program.stdin || program['stdin-paths']) {
  processInput(
